%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function to plot the fvp time series
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This generates an FVP plot where the x-axis is actual experiment time.
% This is very useful for debugging. It gives the time series data for each
% participant, one by one. Using this, we can check that: 
% 1. The forces look correct. For ex: there should not be any drift in the
%   forces over time, the vertical force should not go below zero, and that
%   the general profile looks right i.e. there is double peak for walking.
%   Note that the force is raw data collected from the force plates. So,
%   errors here are indicative of errors in data collection or filtering of
%   forces. So, this is a logical first step in debugging.
% 2. The velocity looks correct. Main thing to check is that the velocity
%   at the end of a stride is equal to the velcocity at the start of the
%   next stride. Also, compare the profile and magnitude to literature.
% 3. The power looks correct. It should be the dot product of the force and
%   velocity for every time step. Compare profile with literature.
%
% INPUTS:
% fStride: The forces broken into strides. It's the output from
%   forcePerStride in the main code.
% vStride: Velocity of the CoM during one stride (begin and end with left
%   heels trike. It's the output from computePower in the main code.
% pStride: power generated due to each leg on the CoM, the belts,and total
%   power generated by each leg. It's the output from computePower in the
%   main code.
% trialFieldName: Trial name. Used to label the figure.

function fvpTimeSeries(fStride,vStride,pStride,trialFieldName)

% Combining all stride by stride values into a vector for easy
% plotting.
fl_all=[]; fr_all=[];vcom_all=[];vltread_all=[];vrtread_all=[];plcom_all=[];
prcom_all=[];pltread_all=[];prtread_all=[];pl_all=[];pr_all=[];
meanPowerLPerStride=[];meanPowerRPerStride=[];
for n=1:length(pStride.l)
    fl_all = [fl_all;fStride.l{n}];
    fr_all = [fr_all;fStride.r{n}];
    vcom_all = [vcom_all;vStride.com{n}];
    vltread_all = [vltread_all;vStride.ltread{n}];
    vrtread_all = [vrtread_all;vStride.rtread{n}];
    plcom_all = [plcom_all;pStride.lcom{n}];
    prcom_all = [prcom_all;pStride.rcom{n}];
    pltread_all = [pltread_all;pStride.ltread{n}];
    prtread_all = [prtread_all;pStride.rtread{n}];
    pl_all = [pl_all;pStride.l{n}];
    pr_all = [pr_all;pStride.r{n}];
    meanPowerLPerStride = [meanPowerLPerStride;mean((pStride.l{n}))];
    meanPowerRPerStride = [meanPowerRPerStride;mean((pStride.r{n}))];
end
ftot_all = fl_all+fr_all;
plcom_all = [plcom_all];
prcom_all = [prcom_all];
pltread_all = [pltread_all];
prtread_all = [prtread_all];
pl_all = [pl_all];
pr_all = [pr_all];

figure(1); clf; hold on;
subplot(3,2,1); hold on; grid on; ylim([-200 900]); grid on; 
title(strcat(trialFieldName,' Left belt'))
plot(fl_all(:,1),'r-')
plot(fl_all(:,2),'g-')
plot(fl_all(:,3),'b-')
ylabel('Force (N)');
legend('x','y','z')

subplot(3,2,2); hold on; grid on; ylim([-200 900]); grid on;
title(strcat(trialFieldName,' Right belt'))
plot(fr_all(:,1),'r-')
plot(fr_all(:,2),'g-')
plot(fr_all(:,3),'b-')
ylabel('Force (N)');

subplot(3,2,3); hold on; grid on; ylim([-1.5 0.5]); grid on; 
plot(vcom_all(:,1),'r-')
plot(vcom_all(:,2),'g-')
plot(vcom_all(:,3),'b-')
plot(vltread_all(:,2),'g--')
ylabel('Velocity (m/s)')

subplot(3,2,4); hold on; grid on; ylim([-1.5 0.5]); grid on; 
plot(vcom_all(:,1),'r-')
plot(vcom_all(:,2),'g-')
plot(vcom_all(:,3),'b-')
plot(vrtread_all(:,2),'g--')
ylabel('Velocity (m/s)')

subplot(3,2,5); hold on; grid on; ylim([-300 300]); grid on; 
plot(pl_all(:,1),'r-');
ylabel('Velocity (m/s)')
ylabel('Power')
xlabel('Sample time');

subplot(3,2,6); hold on; grid on; ylim([-300 300]); grid on; 
plot(pr_all(:,1),'r-');
ylabel('Power')
xlabel('Sample time');pause

end