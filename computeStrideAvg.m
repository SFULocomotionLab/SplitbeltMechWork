%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function to interpolate and compute average (across last 100 strides)
% force, velocity and power within a stride
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This interpolates every stride to be equal length and computes the
% average force, velocity and power (FVP) across the last 100 stride. Use
% this to see the average FVP plots for the last 100 strides. This may not
% help as much with debugging since it is an average but is useful to
% visualize and maybe present to others to explain FVP plots. Since this
% computes the average of the last 100 strides for each participant, the
% "plot" option below produces a figure for each participant. It pauses for
% the user to tap a key after producing each figure. 
%
% INPUTS: 
% subjNo: Participant number. It is used to assign each participant their
%   own figure, if this function is used in a loop, looping through
%   multiple participants.
% fStride: The forces broken into strides. It's the output from
%   forcePerStride in the main code.
% vStride: Velocity of the CoM during one stride (begin and end with left
%   heels trike. It's the output from computePower in the main code.
% pStride: power generated due to each leg on the CoM, the belts,and total
%   power generated by each leg. It's the output from computePower in the
%   main code.
% Fs: Frequency at which the force data were collected plotSwitch: Set to 1
% to plot the interpolated and avearge data for each
%   participant.
% trialFieldName: Trial name. Used to label the figure.
%
% OUTPUTS: 
% avgforce: time average of the forces from the last 100 strides
% avgvel: time average of the velocities from the last 100 strides
% avgpower: time average of the power from the last 100 strides

function [avgforce,avgvel,avgpower] = computeStrideAvg(subjNo,fStride,...
    vStride,pStride,Fs,plotSwitch,trialFieldName)

fl = fStride.l;
fr = fStride.r;
vcom = vStride.com;
vltread = vStride.ltread;
vrtread = vStride.rtread;
plcom = pStride.lcom;
prcom = pStride.rcom;
pltread = pStride.ltread;
prtread = pStride.rtread;
pl = pStride.l;
pr = pStride.r;

% Preallocate
flxinterp=zeros(1000,length(plcom)); frxinterp=zeros(1000,length(plcom));
flyinterp=zeros(1000,length(plcom)); fryinterp=zeros(1000,length(plcom));
flzinterp=zeros(1000,length(plcom)); frzinterp=zeros(1000,length(plcom));
vxcominterp=zeros(1000,length(plcom)); vlxtreadinterp=zeros(1000,length(plcom));
vrxtreadinterp=zeros(1000,length(plcom)); vycominterp=zeros(1000,length(plcom));
vlytreadinterp=zeros(1000,length(plcom)); vrytreadinterp=zeros(1000,length(plcom));
vzcominterp=zeros(1000,length(plcom)); vlztreadinterp=zeros(1000,length(plcom));
vrztreadinterp=zeros(1000,length(plcom)); plcominterp=zeros(1000,length(plcom));
prcominterp=zeros(1000,length(plcom)); pltreadinterp=zeros(1000,length(plcom));
prtreadinterp=zeros(1000,length(plcom)); plinterp=zeros(1000,length(plcom));
printerp=zeros(1000,length(plcom)); tvals=zeros(1000,length(plcom));


for i=1:length(plcom)
    % This stores the power over a stride from a cell array to a double to
    % make calculations easier.
    plcomstride = plcom{i};
    prcomstride = prcom{i};
    pltreadstride = pltread{i};
    prtreadstride = prtread{i};
    plstride = pl{i};
    prstride = pr{i};
    
    flxstride = fl{i}(:,1);
    frxstride = fr{i}(:,1);
    flystride = fl{i}(:,2);
    frystride = fr{i}(:,2);
    flzstride = fl{i}(:,3);
    frzstride = fr{i}(:,3);
    
    vxcomstride = vcom{i}(:,1);
    vlxtreadstride = vltread{i}(:,1);
    vrxtreadstride = vrtread{i}(:,1);
    vycomstride = vcom{i}(:,2);
    vlytreadstride = vltread{i}(:,2);
    vrytreadstride = vrtread{i}(:,2);
    vzcomstride = vcom{i}(:,3);
    vlztreadstride = vltread{i}(:,3);
    vrztreadstride = vrtread{i}(:,3);
    
    strideLen = length(frzstride)-1;
    tvals(:,i) = linspace(0,strideLen,1000);
    
    % This is interpolating across a stride to contain 1000 points.
    flxinterp(:,i) = interp1(flxstride,tvals(:,i));
    frxinterp(:,i) = interp1(frxstride,tvals(:,i));
    flyinterp(:,i) = interp1(flystride,tvals(:,i));
    fryinterp(:,i) = interp1(frystride,tvals(:,i));
    flzinterp(:,i) = interp1(flzstride,tvals(:,i));
    frzinterp(:,i) = interp1(frzstride,tvals(:,i));
    
    vxcominterp(:,i) = interp1(vxcomstride,tvals(:,i));
    vlxtreadinterp(:,i) = interp1(vlxtreadstride,tvals(:,i));
    vrxtreadinterp(:,i) = interp1(vrxtreadstride,tvals(:,i));
    vycominterp(:,i) = interp1(vycomstride,tvals(:,i));
    vlytreadinterp(:,i) = interp1(vlytreadstride,tvals(:,i));
    vrytreadinterp(:,i) = interp1(vrytreadstride,tvals(:,i));
    vzcominterp(:,i) = interp1(vzcomstride,tvals(:,i));
    vlztreadinterp(:,i) = interp1(vlztreadstride,tvals(:,i));
    vrztreadinterp(:,i) = interp1(vrztreadstride,tvals(:,i));
    
    plcominterp(:,i) = interp1(plcomstride,tvals(:,i));
    prcominterp(:,i) = interp1(prcomstride,tvals(:,i));
    pltreadinterp(:,i) = interp1(pltreadstride,tvals(:,i));
    prtreadinterp(:,i) = interp1(prtreadstride,tvals(:,i));
    plinterp(:,i) = interp1(plstride,tvals(:,i));
    printerp(:,i) = interp1(prstride,tvals(:,i));
end

%% Calculating average values of power over a stride

avgforce.lx = mean(flxinterp(:,end-100:end),2);
avgforce.rx = mean(frxinterp(:,end-100:end),2);
avgforce.ly = mean(flyinterp(:,end-100:end),2);
avgforce.ry = mean(fryinterp(:,end-100:end),2);
avgforce.lz = mean(flzinterp(:,end-100:end),2);
avgforce.rz = mean(frzinterp(:,end-100:end),2);

avgvel.xcom = mean(vxcominterp(:,end-100:end),2);
avgvel.lxtread = mean(vlxtreadinterp(:,end-100:end),2);
avgvel.rxtread = mean(vrxtreadinterp(:,end-100:end),2);
avgvel.ycom = mean(vycominterp(:,end-100:end),2);
avgvel.lytread = mean(vlytreadinterp(:,end-100:end),2);
avgvel.rytread = mean(vrytreadinterp(:,end-100:end),2);
avgvel.zcom = mean(vzcominterp(:,end-100:end),2);
avgvel.lztread = mean(vlztreadinterp(:,end-100:end),2);
avgvel.rztread = mean(vrztreadinterp(:,end-100:end),2);

avgpower.lcom = mean(plcominterp(:,end-100:end),2);
avgpower.rcom = mean(prcominterp(:,end-100:end),2);
avgpower.ltread = mean(pltreadinterp(:,end-100:end),2);
avgpower.rtread = mean(prtreadinterp(:,end-100:end),2);
avgpower.l = mean(plinterp(:,end-100:end),2);
avgpower.r = mean(printerp(:,end-100:end),2);

if plotSwitch==1
    % Plot the positive, negative, and net power from slow and fast belts
    xvals = linspace(0,1,1000);
    figure(subjNo); hold on;
    subplot(3,2,1); hold on; grid on; title(strcat(trialFieldName,' Left belt'))
    plot(xvals,avgforce.lx,'r-');
    plot(xvals,avgforce.ly,'g-');
    plot(xvals,avgforce.lz,'b-');
    ylabel('Force (N)'); ylim([-200 900])
    legend('x','y','z')
    
    subplot(3,2,2); hold on; grid on; title(strcat(trialFieldName,' Right belt'))
    plot(xvals,avgforce.rx,'r-');
    plot(xvals,avgforce.ry,'g-');
    plot(xvals,avgforce.rz,'b-');
    ylabel('Force (N)'); ylim([-200 900])
    legend('x','y','z')
    
    subplot(3,2,3); hold on; grid on;
    plot(xvals,avgvel.xcom,'r-');
    plot(xvals,avgvel.ycom,'g-');
    plot(xvals,avgvel.zcom,'b-');
    plot(xvals,avgvel.lytread,'g--');
    ylabel('Velocity (m/s)'); ylim([-1.5 0.5])
    legend('x','y','z')
    
    subplot(3,2,4); hold on; grid on;
    plot(xvals,avgvel.xcom,'r-');
    plot(xvals,avgvel.ycom,'g-');
    plot(xvals,avgvel.zcom,'b-');
    plot(xvals,avgvel.rytread,'g--');
    ylabel('Velocity (m/s)'); ylim([-1.5 0.5])
    legend('x','y','z')
    
    subplot(3,2,5); hold on; grid on;
    plot(xvals,avgpower.l,'r-');
%     plot(xvals,avgpower.lcom,'g-');
%     plot(xvals,avgpower.ltread,'b-');
    ylabel('Power (W)'); ylim([-300 300])
    xlabel('Fraction of Stride')
    
    subplot(3,2,6); hold on; grid on;
    plot(xvals,avgpower.r,'r-')
%     plot(xvals,avgpower.rcom,'g-')
%     plot(xvals,avgpower.rtread,'b-')
    ylabel('Power (W)'); ylim([-300 300]); 
    xlabel('Fraction of Stride'); pause
end
end