function [pStride,vStride,dFastStep,dSlowStep] = calculateComWorkRateForSplitBeltGait(RGRF,LGRF,Fs,speeds)
%  Returns center of mass (COM) work rate for left and right
%  limbs separately and also COM velocity. Input arguments
%  are Right limb GRFs, Left limb GRFs, average walking speed
%  and time duration of stride(s).
%
%  GRFs should be in Nx3 matrix with columns of X,Y,Z and should
%  be data for an integer number of strides (e.g., 1 or 10,
%  but NOT 2.25 strides).
%  +Z is defined as UP.
%  +Y is defined as FORWARD.
%  +X is defined as to the RIGHT.
%  speeds is L and R, in m/s.

fStride.L = LGRF;
fStride.R = RGRF;

vcom = [];
ftot = [fStride.L(:,1)+fStride.R(:,1),...
  fStride.L(:,2)+fStride.R(:,2),...
  fStride.L(:,3)+fStride.R(:,3)];

fl = fStride.l;
fr = fStride.r;
speedL = speeds.L;
speedR = speeds.R;
g = 9.81;

% Integrates total forces over a stride to get center of mass velocity.
% estimate mass for each stride. this is important since we are
% intergrating force and then dividing by mass to get velocity. Ideally,
% we would have very precise and accurate estimates of force and mass
% so that we can just divide the integral by the same exact constant
% in each stride. But since we do not, we estimate mass at each stride
% to account for the noise in force from that stride, and to get a
% continuous looking velocity. i.e. the velocity at the end of one
% stride matches the velocity at the beginning of the next stride.
mass = mean(ftot(:,3))/g;

% velocity of the center of mass.
% medio-lateral velocity
vcom(:,1) = (cumtrapz(ftot(:,1)) / (mass*Fs));
vcom(:,1) = vcom(:,1) - mean(vcom(:,1));
% fore-aft velcoity
vcom(:,2) = (cumtrapz(ftot(:,2)) / (mass*Fs));
vcom(:,2) = vcom(:,2) - mean(vcom(:,2));
% vertical velocity
vcom(:,3) = (cumtrapz(ftot(:,3)-(mass*g)) / (mass*Fs));
vcom(:,3) = vcom(:,3) - mean(vcom(:,3));

% CoM displacement
dcom(:,1) = cumtrapz(vcom(:,1))/Fs; %medio-lateral
dcom(:,2) = cumtrapz(vcom(:,2))/Fs; %fore-aft
dcom(:,3) = cumtrapz(vcom(:,3))/Fs; %vertical

% velocity of the left belt
vltread(:,1) = zeros(length(ftot(:,1)),1); %medio-lateral
vltread(:,2) = ones(length(ftot(:,1)),1) * speedL; %fore-aft
vltread(:,3) = zeros(length(ftot(:,1)),1); %vertical

% velocity of the right belt
vrtread(:,1) = zeros(length(ftot(:,1)),1); %medio-lateral
vrtread(:,2) = ones(length(ftot(:,1)),1) * speedR; %fore-aft
vrtread(:,3) = zeros(length(ftot(:,1)),1); %vertical

% compute mechanical power
plcom = dot(fl(:,1:3),vcom(:,1:3),2); %power generated on the CoM due to the left leg
prcom = dot(fr(:,1:3),vcom(:,1:3),2); %power generated on the CoM due to the right leg
pltread = dot(fl(:,1:3),vltread(:,1:3),2); %power generated by left leg on left belt
prtread = dot(fr(:,1:3),vrtread(:,1:3),2); %power generated by right leg on right belt
pl = plcom + pltread; %total power generated by left leg
pr = prcom + prtread; %total power generated by the right leg

%separate displacement of com into that during the fast step and slow step

%%% SUR, i don't know what to do here to i think integrate over the indices
%%% where each foot is on the belt. 
for m=1:length(dcom)
  if isnan(rStepIndperStride)|| rStepIndperStride==0, continue; end
  dFastStep.com = dcom(1:rStepIndperStride(m),1:3);
  dSlowStep.com = dcom(rStepIndperStride(m):end,1:3);
  n=n+1;
end

vStride.com = vcom;
vStride.ltread = vltread;
vStride.rtread = vrtread;
pStride.lcom = plcom;
pStride.rcom = prcom;
pStride.ltread = pltread;
pStride.rtread = prtread;
pStride.l = pl;
pStride.r = pr;


